name: Feature Branch Cleanup

on:
  pull_request:
    types: [closed]
    branches: [main, master]
    # Only trigger for feature branch PRs being closed
    paths:
      - "helixium-web/**"
      - "Dockerfile*"
  workflow_dispatch:
    inputs:
      force_cleanup:
        description: "Force cleanup of dev environment"
        type: boolean
        default: false

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'ap-southeast-2' }}
  ECS_CLUSTER: "helixium-cluster"
  ECS_DEV_SERVICE: "helixium-dev-service"

jobs:
  cleanup-dev-environment:
    runs-on: ubuntu-latest
    name: üßπ Cleanup Dev Environment
    # Only run if it's a feature branch being closed or manual trigger
    if: (github.event.pull_request.head.ref && startsWith(github.event.pull_request.head.ref, 'feature/')) || github.event_name == 'workflow_dispatch'
    environment: dev

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'ap-southeast-2' }}

      - name: Scale down dev service
        run: |
          echo "üßπ Scaling down development service to save costs..."

          # Check if service exists and is running
          CURRENT_COUNT=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_DEV_SERVICE }} \
            --query 'services[0].desiredCount' \
            --output text 2>/dev/null || echo "0")

          echo "Current desired count: $CURRENT_COUNT"

          if [ "$CURRENT_COUNT" != "0" ]; then
            echo "üìâ Scaling dev service down to 0..."
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${{ env.ECS_DEV_SERVICE }} \
              --desired-count 0
            echo "‚úÖ Dev service scaled down"
          else
            echo "‚úÖ Dev service already scaled down"
          fi

      - name: Clean up old ECR images (keep last 5)
        run: |
          echo "üßπ Cleaning up old ECR images..."

          # Get dev repository name
          ECR_REPO_NAME="helixium-web-dev"

          # List images and keep only the 5 most recent
          aws ecr describe-images \
            --repository-name $ECR_REPO_NAME \
            --query 'sort_by(imageDetails,&imagePushedAt)[:-5].[imageDigest]' \
            --output text | \
          while read digest; do
            if [ -n "$digest" ] && [ "$digest" != "None" ]; then
              echo "üóëÔ∏è  Deleting old image: $digest"
              aws ecr batch-delete-image \
                --repository-name $ECR_REPO_NAME \
                --image-ids imageDigest=$digest || true
            fi
          done

          echo "‚úÖ ECR cleanup completed"

      - name: Cleanup Summary
        run: |
          echo "üìã Feature Branch Cleanup Summary"
          echo "================================="
          echo ""
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üåø Branch: ${{ github.event.pull_request.head.ref }}"
            echo "üìù PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}"
            echo "üéØ Status: ${{ github.event.pull_request.merged && 'Merged' || 'Closed without merge' }}"
          else
            echo "üîß Manual cleanup triggered"
          fi
          echo ""
          echo "‚úÖ Actions completed:"
          echo "  ‚Ä¢ Dev ECS service scaled down to 0"
          echo "  ‚Ä¢ Old ECR images cleaned up (kept 5 most recent)"
          echo "  ‚Ä¢ Cost optimization applied"
          echo ""
          echo "üí° Dev environment can be reactivated by:"
          echo "  ‚Ä¢ Pushing to any feature/ branch"
          echo "  ‚Ä¢ Manual workflow dispatch"

      - name: Notify Slack about cleanup
        if: github.event_name == 'pull_request'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "üßπ Feature Branch Cleanup Completed",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text", 
                    "text": "üßπ Feature Branch Cleanup"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${{ github.event.pull_request.head.ref }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*PR:*\n#${{ github.event.pull_request.number }}"
                    },
                    {
                      "type": "mrkdwn", 
                      "text": "*Status:*\n${{ github.event.pull_request.merged && '‚úÖ Merged' || 'üö´ Closed' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\nDevelopment" 
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üßπ Cleanup completed:*\n‚Ä¢ Dev service scaled down\n‚Ä¢ Old ECR images removed\n‚Ä¢ Costs optimized"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
