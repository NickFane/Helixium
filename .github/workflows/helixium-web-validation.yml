name: Helixium Web Validation

on:
  pull_request:
    branches: [main, master]
    paths:
      - "helixium-web/**"
      - "Dockerfile*"
      - "docker-compose.yml"
      - "nginx.conf"
      - ".dockerignore"
      - ".github/workflows/**"
      - "terraform/**"
  push:
    branches: 
      - "feature/**"  # Trigger on pushes to feature branches
    paths:
      - "helixium-web/**"
      - "Dockerfile*"
      - "docker-compose.yml"
      - "nginx.conf"
      - ".dockerignore"
      - ".github/workflows/**"
      - "terraform/**"
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  validation:
    runs-on: ubuntu-latest
    name: PR Quality Gate - Validate Frontend & Docker

    steps:
      # ===== PART 1: FRONTEND VALIDATION =====

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "./.nvmrc"
          cache: "yarn"
          cache-dependency-path: "./helixium-web/yarn.lock"

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        working-directory: ./helixium-web

      - name: Clean TypeScript build cache
        run: rm -rf node_modules/.tmp
        working-directory: ./helixium-web

      - name: Run linting
        run: yarn lint
        working-directory: ./helixium-web

      - name: Run TypeScript check
        run: yarn tsc --noEmit
        working-directory: ./helixium-web

      - name: Run build
        run: yarn build
        working-directory: ./helixium-web

      # ===== PART 2: E2E TESTING =====

      - name: Install Playwright Browsers
        run: yarn playwright install chromium --with-deps
        working-directory: ./helixium-web

      - name: Run Playwright tests
        run: yarn test:e2e
        working-directory: ./helixium-web

      - name: Upload Playwright report on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: helixium-web/playwright-report/
          retention-days: 30

      # ===== PART 3: DOCKER VALIDATION & BUILD =====

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Docker Compose Configuration
        run: |
          echo "🔍 Validating Docker Compose configuration..."
          docker compose config
          echo "✅ Docker Compose configuration is valid"
        working-directory: ./

      # ===== SINGLE BUILD: Validate + Prepare for Deployment =====

      - name: Build production Docker image (validation + deployment)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: |
            helixium-web-test
            helixium-web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Validate Development Docker Build
        run: |
          echo "🔨 Building development Docker image..."
          docker build -f Dockerfile.dev -t helixium-web-dev-test .
          echo "✅ Development Docker build successful"
        working-directory: ./

      - name: Test Production Container Startup
        run: |
          echo "🚀 Testing production container startup..."
          docker run --rm -d --name helixium-web-test-container helixium-web-test
          sleep 10
          docker ps | grep helixium-web-test-container
          docker stop helixium-web-test-container
          echo "✅ Production container starts successfully"
        working-directory: ./

      - name: Validate Nginx Configuration
        run: |
          echo "🔍 Validating Nginx configuration..."
          docker run --rm -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf nginx:alpine nginx -t
          echo "✅ Nginx configuration is valid"
        working-directory: ./

      - name: Check Docker Image Sizes
        run: |
          echo "📊 Docker image sizes:"
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep -E "(helixium-web-test|helixium-web-dev-test)"
        working-directory: ./

      - name: Save Docker image as artifact
        if: (github.event_name == 'pull_request' && startsWith(github.head_ref, 'feature/')) || (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/'))
        run: |
          echo "💾 Saving Docker image for deployment..."
          docker save helixium-web:${{ github.sha }} | gzip > helixium-web-image.tar.gz
          echo "✅ Docker image saved as artifact"

      - name: Upload Docker image artifact
        if: (github.event_name == 'pull_request' && startsWith(github.head_ref, 'feature/')) || (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/'))
        uses: actions/upload-artifact@v4
        with:
          name: helixium-web-image
          path: helixium-web-image.tar.gz
          retention-days: 1

      - name: Cleanup Docker Images
        run: |
          echo "🧹 Cleaning up Docker images..."
          docker rmi helixium-web-test || true
          docker rmi helixium-web-dev-test || true
          # Clean up deployment image ONLY after artifact is created for feature branches
          # NOTE: We keep the SHA-tagged image for production deployment (main/master branches)
          if [ "${{ github.event_name }}" = "pull_request" ] && [[ "${{ github.head_ref }}" == feature/* ]]; then
            echo "🗑️  Cleaning up feature branch deployment image (artifact already saved)"
            docker rmi helixium-web:${{ github.sha }} || true
          else
            echo "📦 Keeping SHA-tagged image for potential production deployment"
          fi
          echo "✅ Docker images cleaned up"
        working-directory: ./

      # ===== PART 3: VALIDATION SUMMARY =====

      - name: Validation Summary
        run: |
          echo "🎉 PR Quality Gate - Validation Completed Successfully!"
          echo ""
          echo "✅ Frontend Validation:"
          echo "  • Dependencies installed"
          echo "  • Linting passed"
          echo "  • TypeScript check passed"
          echo "  • Build successful"
          echo ""
          echo "✅ E2E Testing:"
          echo "  • Playwright browsers installed"
          echo "  • Development server started"
          echo "  • End-to-end tests passed"
          echo ""
          echo "✅ Docker Validation:"
          echo "  • Docker Compose configuration valid"
          echo "  • Production Docker build successful"
          echo "  • Development Docker build successful"
          echo "  • Container startup test passed"
          echo "  • Nginx configuration valid"
          echo "  • Docker images cleaned up"
          echo ""
          echo "✅ PR Quality Gate Passed!"
          echo "🚀 This PR is ready for review and merge"

  # ===== FEATURE BRANCH DEPLOYMENT =====
  deploy-dev:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Dev Environment
    needs: validation
    if: always() && needs.validation.result == 'success' && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/')
    environment: dev

    env:
      AWS_REGION: ${{ vars.AWS_REGION || 'ap-southeast-2' }}
      ECS_CLUSTER: "helixium-cluster"
      ECS_DEV_SERVICE: "helixium-dev-service"
      ECS_DEV_TASK_DEFINITION: "helixium-dev"
      ECR_DEV_REPO: "helixium-web-dev"

    steps:
      - name: Debug GitHub Context
        run: |
          echo "🔍 Debugging deployment trigger conditions:"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Starts with feature/: ${{ startsWith(github.ref, 'refs/heads/feature/') }}"
          echo "Full condition result: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/') }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: helixium-web-image
          path: .

      - name: Load Docker image
        run: |
          echo "📦 Loading Docker image from artifact..."
          docker load --input helixium-web-image.tar.gz
          echo "✅ Docker image loaded successfully"

      - name: Get branch name and commit SHA for tagging
        id: branch-info
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | tr '[:upper:]' '[:lower:]')
          COMMIT_SHA="${{ github.sha }}"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "clean-branch=$CLEAN_BRANCH" >> $GITHUB_OUTPUT
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "image-tag=${CLEAN_BRANCH}-${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "🏷️  Branch: $BRANCH_NAME → Clean: $CLEAN_BRANCH"
          echo "🏷️  Image tag: ${CLEAN_BRANCH}-${COMMIT_SHA}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR repository URL
        id: get-ecr-url
        run: |
          echo "🔍 Getting ECR dev repository URL..."
          ECR_DEV_REPO_URL=$(aws ecr describe-repositories --repository-names ${{ env.ECR_DEV_REPO }} --query 'repositories[0].repositoryUri' --output text 2>/dev/null || echo "")
          if [ -n "$ECR_DEV_REPO_URL" ]; then
            echo "ecr-dev-repo-url=$ECR_DEV_REPO_URL" >> $GITHUB_OUTPUT
            echo "✅ ECR dev repository: $ECR_DEV_REPO_URL"
          else
            echo "❌ ECR dev repository not found"
            exit 1
          fi

      - name: Tag and push image to dev ECR
        run: |
          echo "🏷️  Tagging image for dev ECR..."
          docker tag helixium-web:${{ steps.branch-info.outputs.commit-sha }} \
            ${{ steps.get-ecr-url.outputs.ecr-dev-repo-url }}:${{ steps.branch-info.outputs.image-tag }}
          docker tag helixium-web:${{ steps.branch-info.outputs.commit-sha }} \
            ${{ steps.get-ecr-url.outputs.ecr-dev-repo-url }}:${{ steps.branch-info.outputs.clean-branch }}-latest

          echo "📤 Pushing images to dev ECR..."
          docker push ${{ steps.get-ecr-url.outputs.ecr-dev-repo-url }}:${{ steps.branch-info.outputs.image-tag }}
          docker push ${{ steps.get-ecr-url.outputs.ecr-dev-repo-url }}:${{ steps.branch-info.outputs.clean-branch }}-latest
          echo "✅ Images pushed to dev ECR"

      - name: Update dev ECS task definition and deploy
        id: deploy
        run: |
          echo "📋 Getting current dev task definition..."
          aws ecs describe-task-definition --task-definition ${{ env.ECS_DEV_TASK_DEFINITION }} --query taskDefinition > dev-task-definition.json

          echo "🔧 Updating task definition with new image..."
          UPDATED_TASK_DEF=$(jq --arg img "${{ steps.get-ecr-url.outputs.ecr-dev-repo-url }}:${{ steps.branch-info.outputs.image-tag }}" \
            '.containerDefinitions[0].image = $img | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
            dev-task-definition.json)
          echo "$UPDATED_TASK_DEF" > updated-dev-task-definition.json

          echo "📝 Registering new task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://updated-dev-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task-definition=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "✅ New task definition: $NEW_TASK_DEF_ARN"

      - name: Scale up and deploy dev service
        run: |
          echo "📊 Checking current dev service state..."
          CURRENT_COUNT=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_DEV_SERVICE }} --query 'services[0].desiredCount' --output text)
          echo "Current desired count: $CURRENT_COUNT"

          if [ "$CURRENT_COUNT" = "0" ]; then
            echo "🚀 Scaling up dev service from 0 to 1..."
            aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_DEV_SERVICE }} --desired-count 1
          fi

          echo "🔄 Updating service with new task definition..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_DEV_SERVICE }} \
            --task-definition ${{ steps.deploy.outputs.task-definition }} \
            --force-new-deployment
          echo "✅ Service update initiated"

      - name: Wait for service stability
        run: |
          echo "⏳ Waiting for service to stabilize..."
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_DEV_SERVICE }}
          echo "✅ Service is stable"

      - name: Test dev deployment
        id: test-deployment
        run: |
          echo "🧪 Testing dev deployment..."
          DEV_URL="https://dev.helixium.nicholasfane.com"
          MAX_ATTEMPTS=10
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "📡 Testing deployment (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
            if curl -f --connect-timeout 10 --max-time 30 -s "$DEV_URL" > /dev/null; then
              echo "✅ Dev environment is responding!"
              echo "deployment-url=$DEV_URL" >> $GITHUB_OUTPUT
              break
            else
              echo "⏳ Dev environment not ready yet, waiting..."
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "⚠️  Dev environment may still be starting up"
                echo "deployment-url=$DEV_URL (may still be starting)" >> $GITHUB_OUTPUT
              else
                sleep 30
              fi
            fi
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: Deployment Summary
        run: |
          echo "🎉 Feature Branch Deployment Completed!"
          echo ""
          echo "✅ Deployment Details:"
          echo "  • Branch: ${{ steps.branch-info.outputs.branch-name }}"
          echo "  • Commit: ${{ steps.branch-info.outputs.commit-sha }}"
          echo "  • Image: ${{ steps.get-ecr-url.outputs.ecr-dev-repo-url }}:${{ steps.branch-info.outputs.image-tag }}"
          echo "  • ECS Service: ${{ env.ECS_DEV_SERVICE }}"
          echo "  • Task Definition: ${{ steps.deploy.outputs.task-definition }}"
          echo ""
          echo "🌐 Dev Environment URL:"
          echo "  https://dev.helixium.nicholasfane.com"
          echo ""
          echo "🚀 Your feature branch is now live!"

      - name: Notify Slack about deployment
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "@here 🌿 Feature Branch ${{ job.status == 'success' && '✅ Deployed' || '❌ Deployment Failed' }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🌿 Feature Branch ${{ job.status == 'success' && '✅ Deployed' || '❌ Deployment Failed' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Branch:*\n${{ github.ref_name }}" },
                    { "type": "mrkdwn", "text": "*Commit:*\n${{ github.sha }}" },
                    { "type": "mrkdwn", "text": "*Author:*\n${{ github.actor }}" },
                    { "type": "mrkdwn", "text": "*Environment:*\nDevelopment" }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ job.status == 'success' && '*🌐 Dev Environment:*\nhttps://dev.helixium.nicholasfane.com' || '*❌ Deployment failed - check workflow logs*' }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": { "type": "plain_text", "text": "View Workflow" },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  # ===== VALIDATION SUMMARY =====
  summary:
    runs-on: ubuntu-latest
    name: 📋 Validation Summary
    needs: [validation]
    if: always() && (needs.validation.result == 'success' || needs.validation.result == 'failure')

    steps:
      - name: Validation Summary
        run: |
          echo "📋 Helixium Web Validation Summary"
          echo "=================================="
          echo ""
          echo "🔍 Validation: ${{ needs.validation.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo ""
          if [ "${{ needs.validation.result }}" = "success" ]; then
            echo "✅ All checks passed!"
            if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/heads/feature/* ]]; then
              echo "🚀 Feature branch deployment should be running..."
            elif [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "🎯 PR is ready for review and merge"
            fi
          else
            echo "❌ Some checks failed - review the logs above"
          fi
