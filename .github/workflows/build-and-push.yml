name: Build and Push to ECR

on:
  workflow_run:
    workflows: ["Terraform Deploy"]
    types:
      - completed
    branches: [main, master]
  pull_request:
    branches: [main, master, feature/*]
    paths:
      - "Dockerfile*"
      - "docker-compose.yml"
      - "nginx.conf"
      - ".dockerignore"
      - "helixium-web/**"
      - ".github/workflows/**"
  workflow_dispatch: # Allow manual triggering

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Images to ECR
    environment: dev
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get ECR Repository URLs from Terraform Outputs
        run: |
          echo "üîç Getting ECR repository URLs from Terraform outputs..."

          # Check if we're running from a workflow_run event
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "‚úÖ Running from terraform-deploy workflow completion"
            echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
            echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
            
            # Get the ECR repository URLs from the terraform-deploy workflow outputs
            ECR_REPO_PROD="${{ github.event.workflow_run.outputs.ecr-repository-url }}"
            ECR_REPO_DEV="${{ github.event.workflow_run.outputs.ecr-dev-repository-url }}"
            
            echo "ECR Repo Prod from outputs: $ECR_REPO_PROD"
            echo "ECR Repo Dev from outputs: $ECR_REPO_DEV"
          else
            echo "‚ö†Ô∏è  Running from different trigger (not workflow_run)"
            ECR_REPO_PROD=""
            ECR_REPO_DEV=""
          fi

          # Fallback to constructing URLs if outputs are not available
          if [ -z "$ECR_REPO_PROD" ]; then
            echo "‚ö†Ô∏è  Using fallback ECR URLs"
            ECR_REGISTRY="417912693723.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com"
            ECR_REPO_PROD="$ECR_REGISTRY/helixium-web"
            ECR_REPO_DEV="$ECR_REGISTRY/helixium-web-dev"
          else
            ECR_REGISTRY=$(echo "$ECR_REPO_PROD" | cut -d'/' -f1)
          fi

          echo "ECR Registry: $ECR_REGISTRY"
          echo "ECR Production Repo: $ECR_REPO_PROD"
          echo "ECR Development Repo: $ECR_REPO_DEV"

          # Set environment variables for use in later steps
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "ECR_REPO_PROD=$ECR_REPO_PROD" >> $GITHUB_ENV
          echo "ECR_REPO_DEV=$ECR_REPO_DEV" >> $GITHUB_ENV

      - name: Debug environment
        run: |
          echo "üîç DEBUGGING WORKFLOW TRIGGER:"
          echo "GitHub event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "SHA: ${{ github.sha }}"
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run status: ${{ github.event.workflow_run.status }}"
          echo "AWS Region configured: ${{ vars.AWS_REGION != '' }}"
          echo "ECR Repository URL configured: ${{ vars.ECR_REPOSITORY_URL != '' }}"
          echo "AWS Access Key configured: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
          echo "AWS Secret Key configured: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"

          echo ""
          echo "üîç CHECKING ECR REPOSITORIES:"
          aws ecr describe-repositories --repository-names helixium-web helixium-web-dev 2>/dev/null || echo "‚ùå ECR repositories do not exist yet"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Verify AWS configuration
        run: |
          echo "Testing AWS configuration..."
          aws sts get-caller-identity
          echo "AWS configuration verified successfully"

      - name: Wait for ECR Repositories
        run: |
          echo "‚è≥ Waiting for ECR repositories to be created..."

          # Wait up to 5 minutes for repositories to exist
          for i in {1..30}; do
            echo "Attempt $i of 30..."
            
            if aws ecr describe-repositories --repository-names helixium-web helixium-web-dev 2>/dev/null; then
              echo "‚úÖ ECR repositories exist!"
              break
            else
              echo "‚ùå ECR repositories not found yet..."
              if [ $i -eq 30 ]; then
                echo "‚ùå ECR repositories still don't exist after 5 minutes"
                echo "This might mean the terraform-deploy workflow failed or didn't run"
                exit 1
              fi
              echo "‚è≥ Waiting 10 seconds before retry..."
              sleep 10
            fi
          done

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for production Docker image
        id: meta-prod
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/helixium-web
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push production Docker image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-prod.outputs.tags }}
          labels: ${{ steps.meta-prod.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push development Docker image
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/helixium-web-dev:pr-${{ github.event.number }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push development Docker image (main/master)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/helixium-web-dev:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image URIs
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" -o "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "Production image: ${{ steps.login-ecr.outputs.registry }}/helixium-web:${{ github.sha }}"
            echo "Development image: ${{ steps.login-ecr.outputs.registry }}/helixium-web-dev:${{ github.sha }}"
            echo "Latest production image: ${{ steps.login-ecr.outputs.registry }}/helixium-web:latest"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Development image: ${{ steps.login-ecr.outputs.registry }}/helixium-web-dev:pr-${{ github.event.number }}-${{ github.sha }}"
          fi
