name: Bootstrap Terraform Backend

on:
  workflow_dispatch: # Manual trigger only
    inputs:
      confirm_bootstrap:
        description: 'Type "bootstrap" to confirm backend creation'
        required: true
        default: "bootstrap"

env:
  TF_VERSION: "1.5.7"
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    name: Bootstrap Terraform Backend
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Verify bootstrap confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_bootstrap }}" != "bootstrap" ]; then
            echo "❌ Please type 'bootstrap' to confirm backend creation"
            exit 1
          fi
          echo "✅ Bootstrap confirmed"

      - name: Check for Existing Resources
        working-directory: ./terraform/bootstrap
        run: |
          echo "Checking for existing backend resources..."
          if aws s3api head-bucket --bucket helixium-terraform-state 2>/dev/null; then
            echo "⚠️  S3 bucket 'helixium-terraform-state' already exists"
          else
            echo "✅ S3 bucket will be created"
          fi

          if aws dynamodb describe-table --table-name helixium-terraform-locks 2>/dev/null; then
            echo "⚠️  DynamoDB table 'helixium-terraform-locks' already exists"
          else
            echo "✅ DynamoDB table will be created"
          fi
        continue-on-error: true

      - name: Terraform Init (Bootstrap)
        working-directory: ./terraform/bootstrap
        run: terraform init

      - name: Terraform Format Check (Bootstrap)
        working-directory: ./terraform/bootstrap
        run: terraform fmt -check

      - name: Import Existing Resources (if they exist)
        working-directory: ./terraform/bootstrap
        run: |
          # Try to import S3 bucket if it exists
          if aws s3api head-bucket --bucket helixium-terraform-state 2>/dev/null; then
            echo "S3 bucket exists, importing..."
            terraform import aws_s3_bucket.terraform_state helixium-terraform-state || echo "S3 bucket already in state or import failed"
          else
            echo "S3 bucket does not exist, will be created"
          fi

          # Try to import DynamoDB table if it exists
          if aws dynamodb describe-table --table-name helixium-terraform-locks 2>/dev/null; then
            echo "DynamoDB table exists, importing..."
            terraform import aws_dynamodb_table.terraform_locks helixium-terraform-locks || echo "DynamoDB table already in state or import failed"
          else
            echo "DynamoDB table does not exist, will be created"
          fi
        continue-on-error: true

      - name: Terraform Plan (Bootstrap)
        working-directory: ./terraform/bootstrap
        run: terraform plan -out=tfplan
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}

      - name: Terraform Apply (Bootstrap)
        working-directory: ./terraform/bootstrap
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}

      - name: Get Backend Configuration
        working-directory: ./terraform/bootstrap
        run: |
          echo "Backend configuration created:"
          terraform output -json backend_config

          # Save backend config for next steps
          terraform output -json backend_config > backend_config.json

          echo "Backend bucket: $(terraform output -raw state_bucket_name)"
          echo "Lock table: $(terraform output -raw lock_table_name)"

      - name: Upload Backend Config
        uses: actions/upload-artifact@v4
        with:
          name: backend-config
          path: terraform/bootstrap/backend_config.json
