name: Deploy Infrastructure and Build Images

on:
  push:
    branches: [main, master]
    paths:
      - "terraform/**"
      - "Dockerfile*"
      - "docker-compose.yml"
      - "nginx.conf"
      - ".dockerignore"
      - "helixium-web/**"
      - ".github/workflows/deploy-and-build.yml"
  workflow_dispatch: # Allow manual triggering

env:
  TF_VERSION: "1.5.7"
  AWS_REGION: ${{ vars.AWS_REGION || 'ap-southeast-2' }}

jobs:
  deploy-and-build:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure and Build Images
    environment: dev

    steps:
      # ===== PART 1: INFRASTRUCTURE DEPLOYMENT =====

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'ap-southeast-2' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Debug Workflow Context
        run: |
          echo "üîç DEBUGGING WORKFLOW TRIGGER:"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "AWS Region: ${{ vars.AWS_REGION }}"

      # Step 1: Bootstrap Backend (if needed)
      - name: Bootstrap Terraform Backend
        working-directory: ./terraform/bootstrap
        run: |
          echo "üîß Bootstrapping Terraform backend..."

          # Check if backend resources exist
          if aws s3api head-bucket --bucket helixium-terraform-state 2>/dev/null; then
            echo "‚úÖ S3 bucket 'helixium-terraform-state' already exists"
          else
            echo "üì¶ Creating S3 bucket for Terraform state..."
          fi

          if aws dynamodb describe-table --table-name helixium-terraform-locks 2>/dev/null; then
            echo "‚úÖ DynamoDB table 'helixium-terraform-locks' already exists"
          else
            echo "üîí Creating DynamoDB table for state locking..."
          fi

          # Initialize bootstrap
          terraform init

          # Import existing resources if they exist but aren't in state
          echo "üîç Checking if resources need to be imported..."

          if aws s3api head-bucket --bucket helixium-terraform-state 2>/dev/null; then
            echo "üì¶ Importing existing S3 bucket..."
            terraform import aws_s3_bucket.terraform_state helixium-terraform-state || echo "S3 bucket already in state or import failed"
          fi

          if aws dynamodb describe-table --table-name helixium-terraform-locks 2>/dev/null; then
            echo "üîí Importing existing DynamoDB table..."
            terraform import aws_dynamodb_table.terraform_locks helixium-terraform-locks || echo "DynamoDB table already in state or import failed"
          fi

          # Plan and apply bootstrap
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

          echo "‚úÖ Backend bootstrap completed"

      # Step 2: Deploy Main Infrastructure
      - name: Deploy Main Infrastructure
        working-directory: ./terraform
        run: |
          echo "üöÄ Deploying main infrastructure..."

          # Wait a moment for backend resources to be fully available
          echo "‚è≥ Waiting for backend resources to be fully available..."
          sleep 10

          # Verify backend resources exist
          echo "üîç Verifying backend resources..."
          if ! aws s3api head-bucket --bucket helixium-terraform-state 2>/dev/null; then
            echo "‚ùå S3 bucket does not exist"
            exit 1
          fi

          if ! aws dynamodb describe-table --table-name helixium-terraform-locks 2>/dev/null; then
            echo "‚ùå DynamoDB table does not exist"
            exit 1
          fi

          echo "‚úÖ Backend resources verified"

          # Create backend configuration
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "helixium-terraform-state"
              key            = "terraform.tfstate"
              region         = "${{ vars.AWS_REGION || 'ap-southeast-2' }}"
              encrypt        = true
              dynamodb_table = "helixium-terraform-locks"
            }
          }
          EOF

          # Initialize with remote backend
          echo "üîß Initializing Terraform with remote backend..."
          for i in {1..3}; do
            echo "Attempt $i of 3..."
            if terraform init; then
              echo "‚úÖ Terraform init successful"
              break
            else
              echo "‚ùå Terraform init failed, attempt $i of 3"
              if [ $i -eq 3 ]; then
                echo "‚ùå All attempts failed"
                exit 1
              fi
              echo "‚è≥ Waiting 5 seconds before retry..."
              sleep 5
            fi
          done

          # Format check
          terraform fmt -check

          # Plan and apply with better error handling
          echo "üìã Planning Terraform deployment..."
          if ! terraform plan -var="aws_region=${{ vars.AWS_REGION || 'ap-southeast-2' }}" -out=tfplan; then
            echo "‚ùå Terraform plan failed"
            exit 1
          fi

          echo "üöÄ Applying Terraform configuration..."
          if ! terraform apply -auto-approve tfplan; then
            echo "‚ùå Terraform apply failed"
            echo "üîç Checking what resources were created..."
            terraform state list || echo "No state available"
            exit 1
          fi

          echo "‚úÖ Main infrastructure deployed successfully"

      # Step 3: Verify ECR Repositories Were Created
      - name: Verify ECR Repositories Created
        working-directory: ./terraform
        run: |
          echo "üîç Verifying ECR repositories were created..."

          # Wait for ECR repositories to be available
          for i in {1..10}; do
            echo "Checking ECR repositories (attempt $i of 10)..."
            
            if aws ecr describe-repositories --repository-names helixium-web helixium-web-dev 2>/dev/null; then
              echo "‚úÖ ECR repositories exist!"
              break
            else
              echo "‚ùå ECR repositories not found yet..."
              if [ $i -eq 10 ]; then
                echo "‚ùå ECR repositories still don't exist after 10 attempts"
                echo "üîç Checking Terraform state..."
                terraform state list || echo "No state available"
                echo "üîç Checking Terraform outputs..."
                terraform output || echo "No outputs available"
                exit 1
              fi
              echo "‚è≥ Waiting 10 seconds before retry..."
              sleep 10
            fi
          done

      # Step 4: Get Infrastructure Outputs
      - name: Get Infrastructure Outputs
        working-directory: ./terraform
        run: |
          echo "üìã Infrastructure outputs:"
          echo "ECR Repository URL: $(terraform output -raw ecr_repository_url)"
          echo "ECR Dev Repository URL: $(terraform output -raw ecr_dev_repository_url)"
          echo "ECS Cluster: $(terraform output -raw ecs_cluster_name)"
          echo "ECS Service: $(terraform output -raw ecs_service_name)"

          # Save outputs for later steps
          echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
          echo "ECR_DEV_REPOSITORY_URL=$(terraform output -raw ecr_dev_repository_url)" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$(terraform output -raw ecs_service_name)" >> $GITHUB_ENV

      # ===== PART 2: DOCKER BUILD AND PUSH =====

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push production Docker image (for main/master)
      - name: Build and push production Docker image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.ECR_REPOSITORY_URL }}:latest,${{ env.ECR_REPOSITORY_URL }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push development Docker image (for main/master)
      - name: Build and push development Docker image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: true
          tags: ${{ env.ECR_DEV_REPOSITORY_URL }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push development Docker image (for pull requests)
      - name: Build and push development Docker image (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: true
          tags: ${{ env.ECR_DEV_REPOSITORY_URL }}:pr-${{ github.event.number }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ===== PART 3: VERIFICATION AND SUMMARY =====

      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."

          # Check ECR repositories
          echo "Checking ECR repositories..."
          aws ecr describe-repositories --repository-names helixium-web helixium-web-dev

          # Check ECS cluster
          echo "Checking ECS cluster..."
          aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER_NAME }}

          # Check ECS service
          echo "Checking ECS service..."
          aws ecs describe-services --cluster ${{ env.ECS_CLUSTER_NAME }} --services ${{ env.ECS_SERVICE_NAME }}

          echo "‚úÖ Deployment verification completed"

      - name: Deployment Summary
        run: |
          echo "üéâ Complete deployment and build completed successfully!"
          echo ""
          echo "üìã Deployed Resources:"
          echo "  ‚Ä¢ S3 Bucket: helixium-terraform-state"
          echo "  ‚Ä¢ DynamoDB Table: helixium-terraform-locks"
          echo "  ‚Ä¢ ECR Repositories: helixium-web, helixium-web-dev"
          echo "  ‚Ä¢ ECS Cluster: ${{ env.ECS_CLUSTER_NAME }}"
          echo "  ‚Ä¢ ECS Service: ${{ env.ECS_SERVICE_NAME }}"
          echo "  ‚Ä¢ VPC, Subnets, Security Groups"
          echo "  ‚Ä¢ IAM Roles for ECS"
          echo "  ‚Ä¢ CloudWatch Log Group"
          echo ""
          echo "üê≥ Built and Pushed Images:"
          if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "  ‚Ä¢ Production: ${{ env.ECR_REPOSITORY_URL }}:latest"
            echo "  ‚Ä¢ Production: ${{ env.ECR_REPOSITORY_URL }}:${{ github.sha }}"
            echo "  ‚Ä¢ Development: ${{ env.ECR_DEV_REPOSITORY_URL }}:${{ github.sha }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "  ‚Ä¢ Development: ${{ env.ECR_DEV_REPOSITORY_URL }}:pr-${{ github.event.number }}-${{ github.sha }}"
          fi
          echo ""
          echo "üîó ECR Repository URLs:"
          echo "  Production: ${{ env.ECR_REPOSITORY_URL }}"
          echo "  Development: ${{ env.ECR_DEV_REPOSITORY_URL }}"
          echo ""
          echo "üìù Next steps:"
          echo "  1. Deploy your application to ECS"
          echo "  2. Access your application via the ECS task public IP"
