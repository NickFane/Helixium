name: Deploy Infrastructure

on:
  push:
    branches: [main, master]
    paths:
      - "terraform/**"
      - ".github/workflows/deploy-infrastructure.yml"
      - ".github/workflows/deploy-application.yml"
  pull_request:
    branches: [main, master]
    paths:
      - "terraform/**"
      - ".github/workflows/deploy-infrastructure.yml"
      - ".github/workflows/deploy-application.yml"
  workflow_dispatch: # Allow manual triggering

env:
  TF_VERSION: "1.5.7"
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    name: Terraform Plan
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Check if backend exists
        id: check-backend
        run: |
          if aws s3api head-bucket --bucket helixium-terraform-state 2>/dev/null; then
            echo "backend_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Backend bucket exists"
          else
            echo "backend_exists=false" >> $GITHUB_OUTPUT
            echo "❌ Backend bucket not found"
            echo "Please run the bootstrap workflow first"
            exit 1
          fi

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          # Create backend.tf dynamically
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "helixium-terraform-state"
              key            = "terraform.tfstate"
              region         = "${{ vars.AWS_REGION }}"
              encrypt        = true
              dynamodb_table = "helixium-terraform-locks"
            }
          }
          EOF

          terraform init

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan

  terraform-apply:
    runs-on: ubuntu-latest
    name: Terraform Apply
    environment: dev
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Debug Workflow Context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Base ref: ${{ github.base_ref }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Check if backend exists
        id: check-backend-apply
        run: |
          if aws s3api head-bucket --bucket helixium-terraform-state 2>/dev/null; then
            echo "backend_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Backend bucket exists"
          else
            echo "backend_exists=false" >> $GITHUB_OUTPUT
            echo "❌ Backend bucket not found"
            echo "Please run the bootstrap workflow first"
            exit 1
          fi

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          # Create backend.tf dynamically
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "helixium-terraform-state"
              key            = "terraform.tfstate"
              region         = "${{ vars.AWS_REGION }}"
              encrypt        = true
              dynamodb_table = "helixium-terraform-locks"
            }
          }
          EOF

          terraform init

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}

      - name: Get Infrastructure Outputs
        working-directory: ./terraform
        run: |
          echo "ALB DNS Name: $(terraform output -raw alb_dns_name)"
          echo "ECS Cluster: $(terraform output -raw ecs_cluster_name)"
          echo "ECS Service: $(terraform output -raw ecs_service_name)"
